`001` <- read.csv("C:/Users/Marelize/Desktop/specdata/001.csv")
View(`001`)
View(`001`)
source(cachematrix.R)
wd()
wd
getwd
getwd()
source(192.168.1.1/volume(sda1)/Coursera/R Programming/Week 3/ProgrammingAssignment2/)
source(192.168.1.1/volume(sda1)/Coursera/R Programming/Week 3/ProgrammingAssignment2)
source(192.168.1.1/volume(sda1)/Coursera/R Programming/Week 3/ProgrammingAssignment2)
setwd(C:\Users\Marelize\Desktop\specdata)
setwd(C:\Users\Marelize\Desktop\specdata/)
setwd(C:\Users\Marelize\Desktop\specdata\)
setwd(C:\\Users\Marelize\Desktop\specdata\)
setwd(C:\\Users\Marelize\Desktop\specdata)
setwd("//192.168.1.1/volume(sda1)/Coursera/R Programming/Week 3/ProgrammingAssignment2")
setwd("C:/Users/Marelize/Desktop/specdata")
getwd()
source(cachematrix.R)
## 2 Functions that cache the inverse of a matrix.
## This functions create a matrix that can cashe its inverse.
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) {inv <<- inverse}
getInverse <- function() {inv}
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
## This function returns the inverse of the matrix that was created in the above function (makeCacheMatrix).
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setInverse(inv)
inv
}
source("cachematrix.R")
pmatrix <- cachematrix(matrix(1:16, nrow = 4, ncol = 4))
source("cachematrix.R")
pmatrix <- cachematrix(matrix(1:16, nrow = 4, ncol = 4))
pmatrix <- makecachematrix(matrix(1:16, nrow = 4, ncol = 4))
pmatrix <- makeCacheMatrix(matrix(1:16, nrow = 4, ncol = 4))
View(pmatrix)
View(pmatrix)
pmatrix&get()
pmatrix$get()
cacheSolve(pmatrix)
source("cachematrix.R")
pmatrix$get()
cacheSolve(pmatrix)
pmatrix <- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
pmatrix$get()
pmatrix$getInverse()
casheSolve(pmatrix)
cacheSolve(pmatrix)
